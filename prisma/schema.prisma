generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Board {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  name       String    @db.VarChar(255)
  columns    Column[]  @relation(name: "BoardColumn")
  user_uuid  String
  user       User      @relation(fields: [user_uuid], references: [uuid])

  @@index([user_uuid])
}

model Column {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  name       String    @db.VarChar(255)
  board_uuid String
  position   Int
  color      String    @db.VarChar(255)
  board      Board     @relation(name: "BoardColumn", fields: [board_uuid], references: [uuid], onDelete: Cascade)
  tasks      Task[]    @relation(name: "ColumnTask")
  user_uuid  String

  @@index([board_uuid])
}

model Task {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @db.Char(36)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(1023)
  column_uuid String
  column      Column    @relation(name: "ColumnTask", fields: [column_uuid], references: [uuid], onDelete: Cascade)
  subtasks    Subtask[] @relation(name: "TaskSubtask")
  user_uuid   String

  @@index([column_uuid])
}

model Subtask {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  name       String    @db.VarChar(255)
  task_uuid  String
  task       Task      @relation(name: "TaskSubtask", fields: [task_uuid], references: [uuid], onDelete: Cascade)

  @@index([task_uuid])
}

model User {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  email      String    @db.VarChar(255)
  password   String    @db.VarChar(255)
  boards     Board[]
}
